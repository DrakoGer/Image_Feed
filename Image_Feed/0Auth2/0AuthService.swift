//
//  OAuthService.swift
//  Image_Feed
//
//  Created by Yura on 09.02.25.
//

import Foundation

final class OAuth2Service {
    
    // MARK: - –°–∏–Ω–≥–ª—Ç–æ–Ω
    private var task: URLSessionTask?
    private var lastCode: String?
    static let shared = OAuth2Service()
    private let baseURL = "https://unsplash.com/oauth/token"
    private let storage = OAuth2TokenStorage()
    private init() {}
    
    // MARK: - –ó–∞–ø—Ä–æ—Å –¢–æ–∫–µ–Ω–∞
    func makeOAuthTokenRequest(code: String) -> URLRequest? {
        guard let baseURL = URL(string: "https://unsplash.com") else {
            fatalError("Invalid base URL")
        }
        
        var components = URLComponents()
        components.scheme = baseURL.scheme
        components.host = baseURL.host
        components.path = "/oauth/token"
        
        components.queryItems = [
            URLQueryItem(name: "client_id", value: Constants.accessKey),
            URLQueryItem(name: "client_secret", value: Constants.secretKey),
            URLQueryItem(name: "redirect_uri", value: Constants.redirectUri),
            URLQueryItem(name: "code", value: code),
            URLQueryItem(name: "grant_type", value: "authorization_code")
        ]
        
        guard let url = components.url else {
            fatalError("Failed to construct URL from components")
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        return request
    }
    
    enum OAuthError: Error {
        case invalidRequest
        case networkError(Error)
        case invalidHTTPResponse
        case invalidStatusCode(Int)
        case invalidData
        case decodingFailed(Error)
        
    }
    
    
    
    // MARK: - –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    func fetchAuthToken(code: String, completion: @escaping (Result<String, OAuthError>) -> Void) {
        assert(Thread.isMainThread) // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        
        // 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –∑–∞–ø—Ä–æ—Å
        if let currentTask = task {
            if lastCode == code {
                completion(.failure(.invalidRequest)) // –£–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å —ç—Ç–∏–º –∂–µ –∫–æ–¥–æ–º
                return
            } else {
                currentTask.cancel() // 2Ô∏è‚É£ –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π –∑–∞–ø—Ä–æ—Å, –µ—Å–ª–∏ –∫–æ–¥ –¥—Ä—É–≥–æ–π
            }
        }
        
        lastCode = code // 3Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥
        
        
        guard let request = makeOAuthTokenRequest(code: code) else {
            completion(.failure(.invalidRequest))
            print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞")
            return
        }
        
        print("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: \(request)")
        
        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            DispatchQueue.main.async {
                self.task = nil
                self.lastCode = nil
                
                if let error = error {
                    completion(.failure(.networkError(error)))
                    print("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:", error.localizedDescription)
                    return
                }
                
                guard let httpResponse = response as? HTTPURLResponse else {
                    DispatchQueue.main.async {
                        completion(.failure(.invalidHTTPResponse))
                        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π HTTP-–æ—Ç–≤–µ—Ç")
                    }
                    return
                }
                
                print("üì• –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", httpResponse.statusCode)
                
                guard (200..<300).contains(httpResponse.statusCode) else {
                    DispatchQueue.main.async {
                        completion(.failure(.invalidStatusCode(httpResponse.statusCode)))
                        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å-–∫–æ–¥ \(httpResponse.statusCode)")
                    }
                    return
                }
                
                guard let data = data else {
                    DispatchQueue.main.async {
                        completion(.failure(.invalidData))
                        print("‚ùå –û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                    }
                    return
                }
                
                print("üì• –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", String(data: data, encoding: .utf8) ?? "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                if let jsonString = String(data: data, encoding: .utf8) {
                    print("jsonString: \(jsonString)")
                } else {
                    print("Error: invalid JSON")
                }
                do {
                    let decoder = JSONDecoder()
                    print("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ JSON:", String(data: data, encoding: .utf8) ?? "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                    print("üì• JSON –ø–µ—Ä–µ–¥ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º:", String(data: data, encoding: .utf8) ?? "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                    
                    let responseBody = try decoder.decode(OAuthTokenResponseBody.self, from: data)
                    
                    print("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω:", responseBody.accessToken)
                    self.storage.token = responseBody.accessToken
                    
                    DispatchQueue.main.async {
                        completion(.success(responseBody.accessToken))
                    }
                } catch {
                    DispatchQueue.main.async {
                        completion(.failure(.decodingFailed(error)))
                        print("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON:", error.localizedDescription)
                    }
                }
            }
        }
        self.task = task // 8Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        task.resume() // 9Ô∏è‚É£ –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å
    }
}
