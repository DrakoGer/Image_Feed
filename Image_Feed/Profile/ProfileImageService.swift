//
//  ProfileImageService.swift
//  Image_Feed
//
//  Created by Yura on 02.03.25.
//

import Foundation

final class ProfileImageService {
    
    static let shared = ProfileImageService() // –°–∏–Ω–≥–ª—Ç–æ–Ω
    private let networkClient = NetworkClient()
    private let storage = OAuth2TokenStorage()
    
    private(set) var avatarURL: String?
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ –∞–≤–∞—Ç–∞—Ä–∫–∏
    static let didChangeNotification = Notification.Name("ProfileImageProviderDidChange")
    
    func fetchProfileImageURL(username: String, completion: @escaping (Result<String, Error>) -> Void) {
        assert(Thread.isMainThread)
        print("üü¢ [ProfileImageService] fetchProfileImageURL() –≤—ã–∑–≤–∞–Ω")

        guard let token = storage.token else {
            completion(.failure(NSError(domain: "AuthError", code: 401, userInfo: nil)))
            return
        }
        print("‚úÖ [ProfileImageService] –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω: \(token)")

        guard let url = URL(string: "https://api.unsplash.com/users/\(username)") else {
            print("‚ùå [ProfileImageService] –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π URL")
            completion(.failure(NSError(domain: "URLError", code: 400, userInfo: nil)))
            return
        }

        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")

        let task = networkClient.objectTask(for: request) { (result: Result<UserResult, Error>) in
            DispatchQueue.main.async {
                switch result {
                case .success(let userResult):
                    let profileImageURL = userResult.profileImage.small
                    self.avatarURL = profileImageURL
                    print("üîç [ProfileImageService] –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: –£—Å–ø–µ—à–Ω–æ, URL –∞–≤–∞—Ç–∞—Ä–∫–∏: \(profileImageURL)")
                    print("‚úÖ [ProfileImageService] –ê–≤–∞—Ç–∞—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: \(profileImageURL)")

                    NotificationCenter.default.post(
                        name: ProfileImageService.didChangeNotification,
                        object: self,
                        userInfo: ["URL": profileImageURL]
                    )

                    completion(.success(profileImageURL))

                case .failure(let error):
                    print("‚ùå [ProfileImageService] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏: \(error.localizedDescription)")
                    completion(.failure(error))
                }
            }

            // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏
            print("üîç [ProfileImageService] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å: URL=\(url.absoluteString), HTTPMethod=\(request.httpMethod ?? "GET")")
            if let authorization = request.value(forHTTPHeaderField: "Authorization") {
                print("üîç [ProfileImageService] –ó–∞–≥–æ–ª–æ–≤–æ–∫ Authorization: \(authorization)")
            } else {
                print("‚ö†Ô∏è [ProfileImageService] –ó–∞–≥–æ–ª–æ–≤–æ–∫ Authorization –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
            }
        }
        task.resume() // üëà –ë–ï–ó –≠–¢–û–ì–û –ó–ê–ü–†–û–° –ù–ï –í–´–ü–û–õ–ù–Ø–ï–¢–°–Ø!
    }
}

// MARK: - –ú–æ–¥–µ–ª—å –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON
struct UserResult: Codable {
    let profileImage: ProfileImage
    
    enum CodingKeys: String, CodingKey {
        case profileImage = "profile_image"
    }
}

struct ProfileImage: Codable {
    let small: String
}

