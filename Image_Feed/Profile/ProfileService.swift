//
//  ProfileService.swift
//  Image_Feed
//
//  Created by Yura on 01.03.25.
//

import Foundation

// MARK: - –ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∞ API
struct ProfileResult: Decodable {
    let username: String
    let firstName: String?
    let lastName: String?
    let bio: String?
    
    enum CodingKeys: String, CodingKey {
        case username
        case firstName = "first_name"
        case lastName = "last_name"
        case bio
    }
}

// MARK: - –ú–æ–¥–µ–ª—å –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è UI
struct Profile {
    let username: String
    let name: String
    let loginName: String
    let bio: String?
}

// MARK: - –°–µ—Ä–≤–∏—Å –ø—Ä–æ—Ñ–∏–ª—è
extension Profile {
    init(result profile: ProfileResult) {
        self.init(username: profile.username,
                  name: "\(profile.firstName ?? "") \(profile.lastName ?? "")".trimmingCharacters(in: .whitespaces),
                  loginName: "@\(profile.username)",
                  bio: profile.bio)
    }
}

final class ProfileService {
    
    static let shared = ProfileService()
    private let networkClient = NetworkClient()
    
    let storage = OAuth2TokenStorage()
    private var task: URLSessionTask?
    private let jsonDecoder = JSONDecoder()
    
    var profile: Profile?
    
    private init() {}
    
    static let didChangeNotification = Notification.Name("ProfileServiceDidChange")
    
    func updateProfile(_ profile: Profile) {
        self.profile = profile
        NotificationCenter.default.post(name: ProfileService.didChangeNotification, object: nil)
    }
    
    // MARK: - –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    private func makeProfileURLRequest(token: String) -> URLRequest? {
        print("üü¢ [ProfileService] makeProfileURLRequest() –≤—ã–∑–≤–∞–Ω")
        let baseURL = Constants.defaultBaseURL
        
        guard let url = URL(string: "/me", relativeTo: baseURL) else {
            print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å URL –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ—Ñ–∏–ª—è")
            return nil
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
        
        return request
    }
    
    func clearProfile() {
        profile = nil
        NotificationCenter.default.post(name: ProfileService.didChangeNotification, object: self)
        print("–ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω")
    }
    
    // MARK: - –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    func fetchProfile(completion: @escaping (Result<Profile, Error>) -> Void) {
        print("üü¢ [ProfileService.fetchProfile] –≤—ã–∑–≤–∞–Ω")
        guard let token = storage.token else {
            print("‚ùå [ProfileService.fetchProfile] –û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ!")
            completion(.failure(NSError(domain: "ProfileService", code: 401, userInfo: nil)))
            return
        }
        print("‚úÖ [ProfileService.fetchProfile] –ù–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω: \(token)")
        
        assert(Thread.isMainThread)
        
        guard let url = URL(string: "https://api.unsplash.com/me") else {
            completion(.failure(NSError(domain: "ProfileService", code: 400, userInfo: [NSLocalizedDescriptionKey: "–ù–µ–≤–µ—Ä–Ω—ã–π URL"])))
            return
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
        request.setValue("application/json", forHTTPHeaderField: "Accept")
        print("üîç [ProfileService.fetchProfile] –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å: URL=\(url.absoluteString), Authorization=\(request.value(forHTTPHeaderField: "Authorization") ?? "–Ω–µ –∑–∞–¥–∞–Ω–æ")")
        
        networkClient.objectTask(for: request) { (result: Result<ProfileResult, Error>) in
            DispatchQueue.main.async {
                switch result {
                case .success(let profileResult):
                    let profile = Profile(result: profileResult)
                    self.profile = profile
                    completion(.success(profile))
                case .failure(let error):
                    print("‚ùå [ProfileService.fetchProfile] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: \(error.localizedDescription) (–∫–æ–¥: \(error._code))")
                    if let nsError = error as NSError?, let data = nsError.userInfo["data"] as? Data,
                       let responseString = String(data: data, encoding: .utf8) {
                        print("üîç [ProfileService.fetchProfile] –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: \(responseString)")
                    }
                    completion(.failure(error))
                }
            }
        }
    }
}
